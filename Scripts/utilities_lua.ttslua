
-- Executes f() on the next frame. This is useful because if you are using
-- methodfs than change the UI using setXmlTable they may enter in conflict
-- since it takes time to update.
-- This is a very terrible way of doing things and should not be used, doesn't
-- support more than one at once. However, you can nest them.
g_func_next_frame = nil
function on_next_frame(f)
    if (g_func_next_frame == nil) then
        g_func_next_frame = f
        startLuaCoroutine(self, 'on_next_frame_coroutine')
    else
        print_error('Trying to add a new coroutine when the next frame has yet to pass')
    end
end

function on_next_frame_coroutine()
    coroutine.yield(0)
    local cur_f = g_func_next_frame
    g_func_next_frame = nil
    cur_f()
    return 1
end


function first_key_table(table)
    for k,_ in pairs(table) do
        return k
    end
end

function first_value_table(table)
    for _,v in pairs(table) do
        return v
    end
end


-- Given an array of numbers, like { 1, -3, 4, 5.3 }, computes the maximum
-- and returns it
function compute_max_array(array)
    local max = nil
    for _, n in ipairs(array) do
        if max == nil then
            max = n
        else
            if n > max then
                max = n
            end
        end
    end
    return max
end

function find_in_array(table, what, comparison_function)
    for _,element in ipairs(table) do
        if comparison_function(element, what) then
            return true
        end
    end
    return false
end

-- Given two arrays, like {1,2,3} and {3,1,2} returns true if the content
-- is the same. Since the objs may vary, and the comparison of those, you
-- can give a comparison function to give something to compare
function array_equals(t1, t2, comparison_function)
    if t1 == t2 then
        return true
    end
    if t1 == nil or t2 == nil then
        return false
    end
    if #t1 ~= #t2 then
        return false
    end

    for i=1,#t1 do
        if not find_in_array(t2, t1[i], comparison_function) then
            return false
        end
    end
    return true
  end

-- Rounds a number to the power of ten given
-- For example, round_to_power(123, 1) => 120, round_to_power(123, 2) => 100
function round_to_power(number, power)
    return math.floor(number/(10^power) + 0.5) * 10^power
end

-- http://lua-users.org/wiki/SimpleRound
function round_decimal(num, numDecimalPlaces)
    local mult = 10^(numDecimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
  end

-- Checks if the given str starts with substr
function str_starts_with(str, substr)
    return string.find(str, '^' .. substr) ~= nil
end

function str_has_substr(str, substr)
    return string.find(str, substr) ~= nil
end

-- As insane as it sounds, tables in lua don't have a well-defined way
-- of getting the number of entries
-- If the table is anything but a contiguous array, the # operator
-- is useless. This computes that.
-- Beware that this iterates the whole table and is therefore, perf intensive.
function tlen(table)
    if table == nil then
        return 0
    end
    local n = 0
    for _ in pairs(table) do n = n + 1 end
    return n
end

-- Inserts the elments of t2 into t1
function array_concat(t1,t2)
    for _,el in pairs(t2) do
        table.insert(t1, el)
    end
end

-- Generates a random number with decimals between start and end
-- By default random only generates integers in the range
function random_float(start_range, end_range)
    return start_range + math.random() * (end_range - start_range)
end

-- Given a flat array, gets a random element
function random_element(array)
    local index = math.random(1, #array)
    return array[index]
end

-- Given a table of key-values, selects a random key and its value
function random_kv(tablekv)
    local keys = {}

    for key,_ in pairs(tablekv) do
        table.insert(keys, key)
    end

    local key = keys[math.random(1, #keys)]
    return key, tablekv[key]
end


-- Returns true if they are roughly the same, as defined by epsilon.
-- By default precision is 0.00001
function equals_float(f1, f2, epsilon)
    epsilon = epsilon or 0.00001
    return math.abs(f1 - f2) < epsilon
end

function vec_equals_float(v1, v2)
    return equals_float(v1.x, v2.x)
        and equals_float(v1.y, v2.y)
        and equals_float(v1.z, v2.z)
end

-- Given an id corresponding to an existing <Dropdown> element on the current
-- XML UI, edits the options to those given.
-- The list of options should be a plain array of strings
-- The index (1 to n) represent which one is currently selected.
-- This is perf intensive, beware. It's also not updated until the next frame.
function set_options_dropdown_by_id(id,  options, idx_selected)
    local xml = UI.getXmlTable()
    local element = find_ui_element_list(xml, id)
    set_options_dropdown(element, options, idx_selected)
    UI.setXmlTable(xml)
end

-- Helper function for find_ui_element
    function find_ui_element_list(root_list, id)
        for i,element in ipairs(root_list) do
            local element = find_ui_element_in_element(element, id)
            if element ~= nil then
                return element
            end
        end
        return nil
    end

-- Normally you can get the UI elements by using UI functions, but there are
-- things that are not retrieved in that data, like the options tags from the
-- XML in a dropdown. For those, this functions allows to get that info,
-- including all children.
-- This searches the full XML table, so it's perf intensive.
function find_ui_element(id)
    return find_ui_element_list(UI.getXmlTable(), id)
end

-- Helper function for find_ui_element
    function find_ui_element_in_element(root_element, id)
        for k, v in pairs(root_element) do
            if k == 'attributes' then
                for kattr, vattr in pairs(v) do
                    if kattr == 'id' and vattr == id then
                        return root_element
                    end
                end
            end
            if k == 'children' then
                return find_ui_element_list(v, id)
            end
        end
        return nil
    end

    -- Given a dropdown element as returned by find_ui_element, changes the element
-- to contain the options desired.
-- NOTE This does NOT update the UI and should be used with find_ui_element
-- and setXmlTable()
function set_options_dropdown(dropdown_element, options, idx_selected)
    local children = dropdown_element['children']
    if children ~= nil then
        -- Delete all elements on the table but keep the reference
        local n = #children
        for i=0, n do children[i]=nil end
    end

    for i, option in ipairs(options) do
        local new_options = {
            tag = 'option',
            value = option
        }
        if i == idx_selected then
            new_options['attributes'] = {
                selected = true
            }
        end
        table.insert(children, i, new_options)
    end
end

-- Copies a table by value, shallow only!
-- http://lua-users.org/wiki/CopyTable
function shallow_copy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else
        -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

-- This will not work with selfreferences!
function deep_copy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deep_copy(orig_key)] = deep_copy(orig_value)
        end
        setmetatable(copy, deep_copy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

-- https://stackoverflow.com/questions/15706270/sort-a-table-in-lua
function sorted_array(arr, order)
    local keys = {}
    for k in pairs(arr) do keys[#keys+1] = k end

    table.sort(keys, function(a,b)
        return order(arr, a, b)
    end)

    local i = 0
    return function()
        i = i + 1
        if keys[i] then
            return keys[i], arr[keys[i]]
        end
    end
end
