ShipUI = {}

function ShipUI:create(ship)
    _shipui = {}
    _shipui.ship = ship


    function _shipui:get_str_cannons(position)
        local data = self.ship.current_cannons[position]
        local str = ""
        local previous = false
        if data.heavy > 0 then
            str = str .. "H " .. data.heavy
            previous = true
        end
        if data.light > 0 then
            if previous then
                str = str .. ","
            end
            str = str .. "L " .. data.light
            previous = true
        end
        if data.mortar > 0 then
            if previous then
                str = str .. ","
            end
            str = str .. "M " .. data.mortar
            previous = true
        end
        if data.carronade > 0 then
            if previous then
                str = str .. ","
            end
            str = str .. "C " .. data.carronade
        end
        if str == "" then
            str = "None"
        end
        return str
    end

    function _shipui:update_knots_ui()
        UI.setAttribute('slider_knots', 'value', self.ship.current_knots)

        local text = texts[g_lang]._Move .. self.ship.current_knots .. texts[g_lang]._knots
        UI.setValue('button_move', text)
        UI.setAttribute('button_move', 'text', text)
    end

    function _shipui:update_degrees_ui()
        UI.setAttribute('slider_turn', 'value', self.ship.current_turn)
        local max_turn = data_ships[self.ship.type].turn_angle
        UI.setAttribute('slider_turn', 'minValue', -max_turn)
        UI.setAttribute('slider_turn', 'maxValue', max_turn)

        local text = texts[g_lang]._Turn .. ' ' .. self.ship.current_turn .. 'ยบ'
        UI.setValue('button_turn', text)
        UI.setAttribute('button_turn', 'text', text)
    end

    function _shipui:show_ui_status()
        if self.ship:has_status(ship_statuses.Fire) then
            UI.setAttribute("btn_status_fire", "image", "ui_fire")
            self.ship.hull_obj.AssetBundle.playLoopingEffect(1)
        else
            UI.setAttribute("btn_status_fire", "image", "ui_fire_disabled")
            self.ship.hull_obj.AssetBundle.playLoopingEffect(0)
        end

        if self.ship:has_status(ship_statuses.CrewHit) then
            UI.setAttribute("btn_status_crewhit", "image", "ui_crewhit")
        else
            UI.setAttribute("btn_status_crewhit", "image", "ui_crewhit_disabled")
        end

        if self.ship:has_status(ship_statuses.QuarterDeckHit) then
            UI.setAttribute("btn_status_quarterdeckhit", "image", "ui_quarterdeckhit")
        else
            UI.setAttribute("btn_status_quarterdeckhit", "image", "ui_quarterdeckhit_disabled")
        end

        if self.ship:has_status(ship_statuses.RudderHit) then
            UI.setAttribute("btn_status_rudderhit", "image", "ui_rudderhit")
        else
            UI.setAttribute("btn_status_rudderhit", "image", "ui_rudderhit_disabled")
        end

        if self.ship:has_status(ship_statuses.GunDeckHit) then
            UI.setAttribute("btn_status_gundeckhit", "image", "ui_gundeckhit")
        else
            UI.setAttribute("btn_status_gundeckhit", "image", "ui_gundeckhit_disabled")
        end

        if self.ship:has_status(ship_statuses.SailHit) then
            UI.setAttribute("btn_status_sailhit", "image", "ui_sailhit")
        else
            UI.setAttribute("btn_status_sailhit", "image", "ui_sailhit_disabled")
        end
        self:show_ui_cannons()
    end

    function _shipui:show_ui_cannons()
        UI.setAttribute("text_guns_bow", "text", self:get_str_cannons('Bow'))
        UI.setAttribute("text_guns_port", "text", self:get_str_cannons('Port'))
        UI.setAttribute("text_guns_starboard", "text", self:get_str_cannons('Starboard'))
        UI.setAttribute("text_guns_stern", "text", self:get_str_cannons('Stern'))
    end

    function _shipui:show_ui()
        UI.setAttribute("text_ship_name", "text", self.ship.display_name)
        self:update_ship_points()

        self:show_ui_cannons()

        UI.setAttribute('text_crew', 'text', "Crew: " .. crew_levels_reverse[self.ship.crew_level])
        UI.setAttribute('text_knots', 'text', texts[g_lang]._Knots .. ": " .. data_ships[self.ship.type].knots)
        UI.setAttribute("text_break_value", "text", texts[g_lang]._Break_Value .. ": " .. data_ships[self.ship.type].break_value)
        UI.setAttribute("text_size", "text", texts[g_lang]._Size .. ": " .. data_ships[self.ship.type].size)
        UI.setAttribute("text_faction", "text", texts[g_lang]._Faction .. ": " .. from_nation_to_ui_nation(self.ship.faction))

        if self.ship.is_fortification then
            UI.setAttribute("image_card", "image", "ship_fortification_card")
            UI.setAttribute("image_guns", "image", "ship_guns_fort_bg")
            UI.setAttribute("panel_guns_stern", "active", false)
            UI.setAttribute("panel_guns_bow", "active", false)
            UI.setAttribute("panel_guns_starboard", "active", false)
            UI.setValue("text_guns_port_title", "")

            UI.setAttribute("button_move", "interactable", false)
            UI.setAttribute("button_turn", "interactable", false)
            UI.setAttribute("text_turn", "text", "")
        else
            self.ship.hull_obj.UI.show("panel_starboard_fire")
            self.ship.hull_obj.UI.show("panel_port_fire")
            self.ship.hull_obj.UI.show("panel_bow_fire")
            self.ship.hull_obj.UI.show("panel_stern_fire")
            self.ship.hull_obj.UI.show("panel_move")
            self.ship.hull_obj.UI.show("panel_turn")

            UI.setAttribute("image_card", "image", "ship_frigate_card")
            UI.setAttribute("image_guns", "image", "ship_guns_bg")
            UI.setAttribute("panel_guns_stern", "active", true)
            UI.setAttribute("panel_guns_bow", "active", true)
            UI.setAttribute("panel_guns_starboard", "active", true)
            UI.setValue("text_guns_port_title", "Port")

            UI.setAttribute("button_move", "interactable", true)
            UI.setAttribute("button_turn", "interactable", true)

            if data_ships[self.ship.type].turn_angle == turn_angles.Red then
                UI.setAttribute("text_turn", "text", texts[g_lang]._Turn .. ': ' .. texts[g_lang]._Red)
            else
                UI.setAttribute("text_turn", "text", texts[g_lang]._Turn .. ': ' .. texts[g_lang]._Yellow)
            end
        end

        local upgrade_text = "Upgrades:\n"
        if tlen(self.ship.upgrades) == 0 then
            upgrade_text = upgrade_text .. "None"
        else
            upgrade_text = upgrade_text .. "<size=14>"
            for upg,val in pairs(self.ship.upgrades) do
                if val then
                    upgrade_text = upgrade_text .. upg:gsub("_", " "):gsub("^%l", string.upper) .. "\n"
                end
            end
            upgrade_text = upgrade_text:sub(1, -2)
            upgrade_text = upgrade_text .. "</size>"
        end
        UI.setAttribute("text_upgrades", "text", upgrade_text)
        self:show_ui_status()

        for _, sail_id in pairs(sails_setups) do
            if sail_id == self.ship.current_sail_setup then
                UI.setAttribute("togglegroup_sail_setup_" .. sail_id,
                    "isOn", true)
            else
                UI.setAttribute("togglegroup_sail_setup_" .. sail_id,
                    "isOn", false)
            end
            if self.ship.is_fortification or data_ships[self.ship.type].is_squadron then
                UI.setAttribute("togglegroup_sail_setup_" .. sail_id,
                    "interactable", false)
            else
                UI.setAttribute("togglegroup_sail_setup_" .. sail_id,
                    "interactable", true)
            end

        end

        self:update_ammo()
        UI.show('panel_ship_bg')
        UI.show('panel_ship')

        UI.show('panel_guns_bg')
        UI.show('panel_guns')
    end

    function _shipui:hide_ui()
        if not self.ship.is_fortification then
            self.ship.hull_obj.UI.hide("panel_starboard_fire")
            self.ship.hull_obj.UI.hide("panel_port_fire")
            self.ship.hull_obj.UI.hide("panel_bow_fire")
            self.ship.hull_obj.UI.hide("panel_stern_fire")
            self.ship.hull_obj.UI.hide("panel_move")
            self.ship.hull_obj.UI.hide("panel_turn")
        end

        UI.hide('panel_ship_bg')
        UI.hide('panel_ship')

        UI.hide('panel_guns_bg')
        UI.hide('panel_guns')
    end

    function _shipui:internal_spawn_buttons(hull_obj)
        local length = 125 * (self.ship.size.x / 2)
        local wide = 182 * (self.ship.size.z / 2)

        local xml = [[
<Panel id="panel_starboard_fire" position="0 -{wide} -40" width="100" height="50" rotation="0 0 180" active="false">
    <Button onClick="fire_starboard">Fire!</Button>"
</Panel>
<Panel id="panel_port_fire" position="0 {wide} -40" width="100" height="50" active="false">
    <Button onClick="fire_port">Fire!</Button>"
</Panel>
<Panel id="panel_stern_fire" position="-{length} 0 -40" width="100" height="50" rotation="0 0 90" active="false">
    <Button onClick="fire_stern">Fire!</Button>"
</Panel>
<Panel id="panel_bow_fire" position="{length} 0 -40" width="100" height="50" rotation="0 0 270" active="false">
    <Button onClick="fire_bow">Fire!</Button>"
</Panel>
]]
        xml = xml:gsub("{wide}", wide):gsub("{length}", length)
        hull_obj.UI.setXml(xml)

        hull_obj.setLuaScript([[
            function fire_port(player, value, id)
                Global.call("send_to_ship", {
                    guid = self.guid,
                    fn = "fire",
                    params = {player, "Port"}
                })
            end

            function fire_starboard(player, value, id)
                Global.call("send_to_ship", {
                    guid = self.guid,
                    fn = "fire",
                    params = {player, "Starboard"}
                })
            end

            function fire_stern(player, value, id)
                Global.call("send_to_ship", {
                    guid = self.guid,
                    fn = "fire",
                    params = {player, "Stern"}
                })
            end

            function fire_bow(player, value, id)
                Global.call("send_to_ship", {
                    guid = self.guid,
                    fn = "fire",
                    params = {player,"Bow"}
                })
            end
        ]])
    end

    function _shipui:update_ship_points()
        if self.ship.is_fortification then
            UI.setAttribute("text_ship_points", "text", texts[g_lang]._Structure_points .. ": "
                .. self.ship.current_ship_points .. "/"
                ..  self.ship.max_ship_points)
        else
            UI.setAttribute("text_ship_points", "text", texts[g_lang]._Ship_points .. ": "
                .. self.ship.current_ship_points .. "/"
                ..  self.ship.max_ship_points)
        end
    end

    function _shipui:update_ammo()
        local ammo_per_position = self.ship.current_ammo
        for pos, ammo in pairs(ammo_per_position) do
            local pos_str = cannon_positions_reverse[pos]:lower()
            local ammo_str = ammo_types_reverse[ammo]:lower()

            local image = 'ui_icon_ammo_' .. ammo_str
            if self.ship.current_turn_positions_shot[pos] then
                image = image .. '_hover'
            end
            UI.setAttribute("btn_change_ammo_" .. pos_str, "image", image)
        end
    end

    return _shipui
end
