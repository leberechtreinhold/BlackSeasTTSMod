g_ui_nation_selected = "Spain"
function on_ui_nation_selected(player, value, id)
    g_ui_nation_selected = value
end

function on_ui_cancel_deploy_fleet(player, value, id)
    UI.hide('panel_fleet_selection_bg')
    UI.setAttribute('panel_fleet_selection_bg', 'active', false)
    UI.hide('panel_fleet_selection')
    UI.setAttribute('panel_fleet_selection', 'active', false)
end

g_ui_current_ship_type = 'shiptype_brig'
function on_ui_ship_type_selected(player, value, id)
    if value == 'Brig' then
        g_ui_current_ship_type = 'shiptype_brig'
    elseif value == 'Bomb Ketch' then
        g_ui_current_ship_type = 'shiptype_bomb_ketch'
    elseif value == 'Small Merchant' then
        g_ui_current_ship_type = 'shiptype_small_merchant'
    elseif value == 'Small Galley' then
        g_ui_current_ship_type = 'shiptype_small_galley'
    elseif value == 'Frigate (5th)' then
        g_ui_current_ship_type = 'shiptype_frigate'
    elseif value == 'Frigate (6th)*' then
        g_ui_current_ship_type = 'shiptype_frigate_6th'
    elseif value == 'Frigate (4th)*' then
        g_ui_current_ship_type = 'shiptype_frigate_4th'
    elseif value == 'Line (3rd)' then
        g_ui_current_ship_type = 'shiptype_3rd'
    elseif value == 'Line (Small 3rd)*' then
        g_ui_current_ship_type = 'shiptype_small_3rd'
    elseif value == 'Gun Emplacement' then
        g_ui_current_ship_type = 'fortification_gun_emplacement'
    elseif value == 'Mortar Emplacement' then
        g_ui_current_ship_type = 'fortification_mortar_emplacement'
    elseif value == 'Martello Tower' then
        g_ui_current_ship_type = 'fortification_martello'
    elseif value == 'Bucentaure*' then
        g_ui_current_ship_type = 'shiptype_bucentaure'
    elseif value == 'HMS Bellerophon*' then
        g_ui_current_ship_type = 'shiptype_bellerophon'
    elseif value == 'La Princesa*' then
        g_ui_current_ship_type = 'shiptype_la_princesa'
    elseif value == 'USS Essex*' then
        g_ui_current_ship_type = 'shiptype_essex'
    elseif value == 'USS Constitution*' then
        g_ui_current_ship_type = 'shiptype_constitution'
    elseif value == 'HMS Indefatigable*' then
        g_ui_current_ship_type = 'shiptype_indefatigable'
    end
end

function on_ui_deploy_fleet(player, value, id)
    UI.hide('panel_fleet_selection_bg')
    UI.setAttribute('panel_fleet_selection_bg', 'active', false)
    UI.hide('panel_fleet_selection')
    UI.setAttribute('panel_fleet_selection', 'active', false)

    local myship = Ship:create(g_ui_current_ship_type, g_ui_nation_selected, g_ui_crew_selected, g_ui_upgrades_selected)
    myship:spawn({x=0, y=0, z=0})
end

g_ui_crew_selected = crew_levels.regular
function on_ui_crew_type_selected(player, value, id)
    if value == "Inexperienced" then
        g_ui_crew_selected = crew_levels.inexperienced
    elseif value == "Veteran" then
        g_ui_crew_selected = crew_levels.veteran
    else
        g_ui_crew_selected = crew_levels.regular
    end
end

function on_deploy_ship(obj, color, alt_click)
    local is_active = UI.getAttribute('panel_fleet_selection_bg', 'active')
    if is_active == 'true' then
        print_error('Another player is spawning a ship, please wait.')
        return
    end

    UI.show('panel_fleet_selection_bg')
    UI.show('panel_fleet_selection')
    Wait.frames(function()
        UI.setAttribute('panel_fleet_selection_bg', 'visibility', color)
        UI.setAttribute('panel_fleet_selection', 'visibility', color)
    end, 1)

end

function on_add_ship_points(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:change_ship_points(1)
end

function on_remove_ship_points(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:change_ship_points(-1)
end

function on_change_ammo_stern(obj, color, alt_click)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end

    UI.show('panel_select_ammo_bg')
    UI.show('panel_select_ammo')

    g_ui_ammo_position = cannon_positions.Stern
    local ammo = ship.current_ammo[g_ui_ammo_position]
    g_ui_ammo_type = ammo
    UI.setAttribute('toggle_group_ammo_type_' .. ammo, 'isOn', true)
end

function on_change_ammo_bow(obj, color, alt_click)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end

    UI.show('panel_select_ammo_bg')
    UI.show('panel_select_ammo')

    g_ui_ammo_position = cannon_positions.Bow
    local ammo = ship.current_ammo[g_ui_ammo_position]
    g_ui_ammo_type = ammo
    UI.setAttribute('toggle_group_ammo_type_' .. ammo, 'isOn', true)
end

function on_change_ammo_port(obj, color, alt_click)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end

    UI.show('panel_select_ammo_bg')
    UI.show('panel_select_ammo')

    g_ui_ammo_position = cannon_positions.Port
    local ammo = ship.current_ammo[g_ui_ammo_position]
    g_ui_ammo_type = ammo
    UI.setAttribute('toggle_group_ammo_type_' .. ammo, 'isOn', true)
end

function on_change_ammo_starboard(obj, color, alt_click)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end

    UI.show('panel_select_ammo_bg')
    UI.show('panel_select_ammo')

    g_ui_ammo_position = cannon_positions.Starboard
    local ammo = ship.current_ammo[g_ui_ammo_position]
    g_ui_ammo_type = ammo
    UI.setAttribute('toggle_group_ammo_type_' .. ammo, 'isOn', true)
end

g_ui_ammo_type = ammo_types.round
g_ui_ammo_position = ammo_types.Bow
function on_toggle_ammo_type(player, value, id)
    g_ui_ammo_type = tonumber(value)
    UI.setAttribute('toggle_group_ammo_type_' .. g_ui_ammo_type, 'isOn', true)
end

function on_change_ammo(player, value, id)
    UI.hide('panel_select_ammo_bg')
    UI.setAttribute('panel_select_ammo_bg', 'active', false)
    UI.hide('panel_select_ammo')
    UI.setAttribute('panel_select_ammo', 'active', false)

    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end

    ship:change_ammo(g_ui_ammo_position, g_ui_ammo_type)
end

function on_cancel_ammo(player, value, id)
    UI.hide('panel_select_ammo_bg')
    UI.setAttribute('panel_select_ammo_bg', 'active', false)
    UI.hide('panel_select_ammo')
    UI.setAttribute('panel_select_ammo', 'active', false)
end

function on_change_board_size(obj, color, alt_click)
    UI.show('panel_select_board_size_bg')
    UI.show('panel_select_board_size')

    UI.setAttribute('togglegroup_table_size_' .. g_ui_table_size_in_use, 'isOn', true)
end

function on_cancel_board_change(obj, color, alt_click)
    UI.hide('panel_select_board_size_bg')
    UI.setAttribute('panel_select_board_size_bg', 'active', false)
    UI.hide('panel_select_board_size')
    UI.setAttribute('panel_select_board_size', 'active', false)
    g_ui_table_size_selected = g_ui_table_size_in_use
end

function on_accept_board_change(obj, color, alt_click)
    UI.hide('panel_select_board_size_bg')
    UI.setAttribute('panel_select_board_size_bg', 'active', false)
    UI.hide('panel_select_board_size')
    UI.setAttribute('panel_select_board_size', 'active', false)

    g_ui_table_size_in_use = g_ui_table_size_selected
    spawn_board_start(g_boards[board_sizes_reverse[g_ui_table_size_selected]])
end

g_ui_table_size_in_use = board_sizes.medium
g_ui_table_size_selected = board_sizes.medium
function on_toggle_table_size(player, value, id)
    g_ui_table_size_selected = tonumber(value)
    UI.setAttribute('togglegroup_table_size_' .. value, 'isOn', true)
end

function on_toggle_sail_setup(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    UI.setAttribute('togglegroup_sail_setup_' .. value, 'isOn', true)
    ship:set_sail_setup(tonumber(value))
end

function on_toggle_fire(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:toggle_status(ship_statuses.Fire)
end

function on_toggle_crewhit(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:toggle_status(ship_statuses.CrewHit)
end

function on_toggle_quarterdeckhit(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:toggle_status(ship_statuses.QuarterDeckHit)
end

function on_toggle_rudderhit(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:toggle_status(ship_statuses.RudderHit)
end

function on_toggle_gundeckhit(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:toggle_status(ship_statuses.GunDeckHit)
end

function on_toggle_sailhit(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:toggle_status(ship_statuses.SailHit)
end

function ui_update_summary()
    local summary_per_faction = {}
    for _, ship in pairs(g_state.ships) do
        if not ship.is_fortification then
            if not summary_per_faction[ship.faction] then
                summary_per_faction[ship.faction] = ''
            end
            local ship_summary = ship.display_name .. ' - '
                .. ship.current_ship_points .. "/"
                .. data_ships[ship.type].ship_points
                .. '\n'
            if ship.surrendered or ship.current_ship_points <= 0 then
                ship_summary = '<color=red>' .. ship_summary .. '</color>'
            elseif ship.current_ship_points < data_ships[ship.type].break_value then
                ship_summary = '<color=yellow>' .. ship_summary .. '</color>'
            end
            summary_per_faction[ship.faction] = summary_per_faction[ship.faction]
                .. ship_summary
        end
    end
    local summary = "<b>"
    for faction_name, summary_individual in pairs(summary_per_faction) do
        summary = summary .. faction_name .. '\n' .. summary_individual .. '\n'
    end
    summary = summary .. '</b>'
    UI.setValue('text_summary', summary)
end


function on_slider_knots_changed(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:set_knots(value)
end

function on_move(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:move()
end

function on_slider_wheel_changed(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:set_turn(value)
end

function on_turn(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:turn()
end

function on_skill_test(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:skill_test()
end

function on_critical_roll_hull(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:critical_roll_hull()
end

function on_critical_roll_high(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:critical_roll_high()
end

function on_surrender(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:surrender()
end

function on_fire_stern(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:fire(player, 'Stern')
end

function on_fire_bow(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:fire(player, 'Bow')
end

function on_fire_starboard(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:fire(player, 'Starboard')
end

function on_fire_port(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:fire(player, 'Port')
end

function on_undo_move(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:undo_move()
end

g_ui_upgrades_selected = {}
function on_toggle_upgrade(player, value, id)
    local enabled = value == 'True'
    local upgrade = id:gsub('toggle_', '')
    if not ship_upgrades[upgrade] then
        print_error('Bug in upgrade ' .. id .. '. Notify to the mod creator.')
    end
    if enabled then
        g_ui_upgrades_selected[upgrade] = true
    else 
        g_ui_upgrades_selected[upgrade] = nil
    end
end

function on_click_masthit(player, value, id)
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:break_masts()
end

function on_change_name()
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    
    UI.show('panel_rename_bg')
    UI.show('panel_rename')

    UI.setValue('text_current_name', ship.display_name)
    UI.setAttribute('input_new_name', 'text', '')
end

function on_new_name_change_inputfield(player, value, id)
    UI.setAttribute('input_new_name', 'text', value)
end

function on_cancel_name_change(player, value, id)
    UI.hide('panel_rename_bg')
    UI.setAttribute('panel_rename_bg', 'active', false)
    UI.hide('panel_rename')
    UI.setAttribute('panel_rename', 'active', false)

    UI.setValue('input_new_name', '')
end

function on_accept_name_change(player, value, id)
    UI.hide('panel_rename_bg')
    UI.setAttribute('panel_rename_bg', 'active', false)
    UI.hide('panel_rename')
    UI.setAttribute('panel_rename', 'active', false)

    new_value = UI.getAttribute('input_new_name', 'text')
    if new_value ~= '' then
        local ship = g_state:return_single_ship_selected()
        if not ship then
            return
        end
        ship:set_display_name(new_value)
    end
end

function on_change_faction()
    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    
    UI.show('panel_change_faction_bg')
    UI.show('panel_change_faction')

    UI.setValue('text_current_faction', ship.faction)
    UI.setAttribute('input_new_name', 'text', '')
end

g_ui_nation_selected_change = "Spain"
function on_ui_nation_selected_change(player, value, id)
    g_ui_nation_selected_change = value
end

function on_cancel_faction_change(player, value, id)
    UI.hide('panel_change_faction_bg')
    UI.setAttribute('panel_change_faction_bg', 'active', false)
    UI.hide('panel_change_faction')
    UI.setAttribute('panel_change_faction', 'active', false)
end

function on_accept_faction_change(player, value, id)
    UI.hide('panel_change_faction_bg')
    UI.setAttribute('panel_change_faction_bg', 'active', false)
    UI.hide('panel_change_faction')
    UI.setAttribute('panel_change_faction', 'active', false)

    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship:set_faction(g_ui_nation_selected_change)
end

g_ui_show_firing_gizmo = true
function on_toggle_gizmo(player, value, id)
    g_ui_show_firing_gizmo = value == 'True'

    local ship = g_state:return_single_ship_selected()
    if not ship then
        return
    end
    ship.gizmo:update_gizmo()    
end