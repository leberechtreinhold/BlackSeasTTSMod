-- Given two tables with x,y,z numerical components, computes the dot product of them
function vec_dot_product(vec1, vec2)
    return { x = vec1['x'] * vec2['x'], y = vec1['y'] * vec2['y'], z = vec1['z'] * vec2['z'] }
end

-- Given two tables with x,y,z numerical components, computes the sum of both
function vec_add(vec1, vec2)
    return { x = vec1['x'] + vec2['x'], y = vec1['y'] + vec2['y'], z = vec1['z'] + vec2['z'] }
end

-- Given two tables with x,y,z numerical components, computes the vec1-vec2
function vec_sub(vec1, vec2)
    return { x = vec1['x'] - vec2['x'], y = vec1['y'] - vec2['y'], z = vec1['z'] - vec2['z'] }
end

-- Given a table with x,y,z numerical components, and a escalar number, returns a vector with each component multiplied
function vec_mul_escalar(vec, num)
    return { x = vec['x'] * num, y = vec['y'] * num, z = vec['z'] * num }
end

-- Given two tables with x,y,z numerical components, returns a vector
-- with each coomponent the multiplication of the two of the same value
function vec_mul_vec(vec, vec2)
    return { x = vec['x'] * vec2['x'], y = vec['y'] * vec2['y'], z = vec['z'] * vec2['z'] }
end

-- Given a table with x,y,z numerical components, and a escalar number, returns a vector with each component divided
function vec_div_escalar(vec, num)
    return { x = vec['x'] / num, y = vec['y'] / num, z = vec['z'] / num }
end

-- Given two tables with x,y,z numerical components, returns a vector
-- with each coomponent the divsion of the two of the same value
function vec_div_vec(vec, vec2)
    return { x = vec['x'] / vec2['x'], y = vec['y'] / vec2['y'], z = vec['z'] / vec2['z'] }
end

-- Given a table with x,y,z numerical components representing inches, return the same vector with each component being in mm
function vec_in_to_mm(vec)
    return { x = from_in_to_mm(vec['x']), y = from_in_to_mm(vec['y']), z = from_in_to_mm(vec['z']) }
end

-- Given a tables with x,y,z numerical components, returns a [x,y,z] string with two decimals of precision
function vec_to_str(vec)
    if vec == nil then
        return '[nil]'
    end
    return '[' .. string.format('%.2f',vec['x']) .. ', ' .. string.format('%.2f',vec['y']) .. ', ' .. string.format('%.2f',vec['z']) .. ']'
end


-- Given two points represented by tables with x,z coords, determines the angle
-- in radains, of point B relative to A, taking into account the orientation
-- of A (in the Y axis) in radians
function relative_angle_from_point(pointA, pointB, rotationA)
    local zdiff = pointB['z'] - pointA['z']
    local xdiff = pointB['x'] - pointA['x']

    local relative_angle = math.atan2(zdiff, xdiff)
    if relative_angle < 0 then
        relative_angle = 2*math.pi + relative_angle
    end

    local angle_adjusted_coords = relative_angle + rotationA
    if angle_adjusted_coords > 2*math.pi then
        angle_adjusted_coords = angle_adjusted_coords - 2*math.pi
    end
    return angle_adjusted_coords
end

-- Given a tables with x,y,z each with a degree number [0-360], returns a table with x,y,z converted to radians (o, 2pi)
function from_degrees_to_rad(vec)
    return { x = math.rad(vec['x']),  y = math.rad(vec['y']), z = math.rad(vec['z']) }
end

function from_in_to_mm(inches)
    return inches * 25.4
end

function from_mm_to_in(mm)
    return mm / 25.4
end

-- Given two tables with x,y,z representing world coords, calculates the distance between them in x,z, SQUARED
-- This is because we don't need the square root in most cases
function distance_points_flat_sq(point1, point2)
    return (point1['x'] - point2['x'])^2 + (point1['z'] - point2['z'])^2
end

-- Given two tables with x,y,z representing world coords, calculates the distance
-- between them in x,z
function distance_points_flat(point1, point2)
    return math.sqrt((point1['x'] - point2['x'])^2 + (point1['z'] - point2['z'])^2)
end

-- Given a number of radians (0, 2pi), returns a table with x,y,z components,
-- where y 0 is always 0 and x,z is the rotation value corresponding to those
-- radians, x being updown and z leftright
function rad_to_vector(radians)
    return { x = math.sin(radians), y = 0, z = math.cos(radians) }
end

-- Like the other rad_to_vector, with z up/down and x leftright
function rad_to_vector_xz(radians)
    return { x = math.cos(radians), y = 0, z = math.sin(radians) }
end

-- Angles in TTS can be pretty funny: the y axis defines the rotation from +x to
-- -y to -x to +y, which is pretty unintuitive, but I guess they wanted the
-- degrees to be clockwise instead of counterclockwise...
-- This makes them counterclockwise, x goes to -y to -x
function normalize_angle(angle)
    return 2*math.pi - angle
end

-- Given an angle in radians, returns a new angle in radians which is the same,
-- but between [0, 2*pi]. Only supports up to one rotation.
function positive_angle(angle)
    if angle < 0 then
        return angle + math.pi*2
    end
    if angle >= math.pi*2 then
        return angle - math.pi*2
    end
    return angle
end

function positive_angle_deg(angle)
    if angle < 0 then
        return angle + 360
    end
    if angle >= 360 then
        return angle - 360
    end
    return angle
end

-- Given a point with xyz coordinates, relative to the center, rotates along
-- theta
function rotate_point_relative(point, center_coordinates, theta)
    return {
        x = point['x'] * math.cos(theta) - point['z'] * math.sin(theta) + center_coordinates['x'],
        y = point['y'] + center_coordinates['y'],
        z = point['x'] * math.sin(theta) + point['z'] * math.cos(theta) + center_coordinates['z']
    }
end

-- Given a point with xyz coordinates, where xz form a plane, rotates using
-- an angle theta, respective to a coordinate system with xyz coordinates,
-- on that same plane
function rotate_point(point, center_coordinates, theta)
    local relative = vec_sub(point, center_coordinates)
    return rotate_point_relative(relative, center_coordinates, theta)
end

-- Given a table with four corners top/bot left/right, each with a xyz
-- vector representing coordinates, returns a str version of it
-- { corner = [coords], corner = [coords], ...}
function corners_to_str(corner)
    return '{' ..
        'topright=' .. vec_to_str(corner['topright']) .. ', ' ..
        'botright=' .. vec_to_str(corner['botright']) .. ', ' ..
        'topleft='  .. vec_to_str(corner['topleft'])  .. ', ' ..
        'botleft='  .. vec_to_str(corner['botleft']) .. '}'
end

-- Helper function for find_ui_element
function find_ui_element_in_element(root_element, id)
    for k, v in pairs(root_element) do
        if k == 'attributes' then
            for kattr, vattr in pairs(v) do
                if kattr == 'id' and vattr == id then
                    return root_element
                end
            end
        end
        if k == 'children' then
            return find_ui_element_list(v, id)
        end
    end
    return nil
end

-- Helper function for find_ui_element
function find_ui_element_list(root_list, id)
    for i,element in ipairs(root_list) do
        local element = find_ui_element_in_element(element, id)
        if element ~= nil then
            return element
        end
    end
    return nil
end

-- Normally you can get the UI elements by using UI functions, but there are
-- things that are not retrieved in that data, like the options tags from the
-- XML in a dropdown. For those, this functions allows to get that info,
-- including all children.
-- This searches the full XML table, so it's perf intensive.
function find_ui_element(id)
    return find_ui_element_list(UI.getXmlTable(), id)
end

-- Given a dropdown element as returned by find_ui_element, returns a list of
-- the options. All options should have a value set.
function get_options_dropdown(dropdown_element)
    local list = {}
    local children = dropdown_element['children']
    if children == nil then
        return list
    end
    for i,option in ipairs(children) do
        list.insert(option['value'])
    end
end


-- Given a dropdown element as returned by find_ui_element, returns the
-- currently selected one
function get_option_selected_dropdown(dropdown_element)
    local children = dropdown_element['children']
    if children == nil then
        return nil
    end
    for i,option in ipairs(children) do
        if option['attributes'] ~= nil then
            if option['attributes']['selected'] == 'true' then
                return option['value']
            end
        end
    end
end

-- Given an id corresponding to an existing <Dropdown> element on the current
-- XML UI, returns the currently selected element.
-- This is because UI.getAttribute('dropdownid', 'text') doesn't work, despite
-- what the official docs say... it returns nil
-- NOTE It's perf intensive
function get_option_selected_dropdown_by_id(id)
    local element = find_ui_element(id)
    return get_option_selected_dropdown(element)
end

-- Given a dropdown element as returned by find_ui_element, changes the element
-- to contain the options desired.
-- NOTE This does NOT update the UI and should be used with find_ui_element
-- and setXmlTable()
function set_options_dropdown(dropdown_element, options, idx_selected)
    local children = dropdown_element['children']
    if children ~= nil then
        -- Delete all elements on the table but keep the reference
        local n = #children
        for i=0, n do children[i]=nil end
    end

    for i, option in ipairs(options) do
        local new_options = {
            tag = 'option',
            value = option
        }
        if i == idx_selected then
            new_options['attributes'] = {
                selected = true
            }
        end
        table.insert(children, i, new_options)
    end
end

-- Given an id corresponding to an existing <Dropdown> element on the current
-- XML UI, edits the options to those given.
-- The list of options should be a plain array of strings
-- The index (1 to n) represent which one is currently selected.
-- This is perf intensive, beware. It's also not updated until the next frame.
function set_options_dropdown_by_id(id,  options, idx_selected)
    local xml = UI.getXmlTable()
    local element = find_ui_element_list(xml, id)
    set_options_dropdown(element, options, idx_selected)
    UI.setXmlTable(xml)
end

-- Given a position for a center,  gets the coordinates of circle on the XZ plane
function get_coordinates_circle(center, radius, steps)
    local point_array = {}
    local degrees_per_step = 360 / steps
    local radians_per_step = math.rad(degrees_per_step)
    for i = 0, steps do
        local p = {
            x = center['x'] + math.cos(radians_per_step * i) * radius,
            y = center['y'],
            z = center['z'] + math.sin(radians_per_step * i) * radius
        }
        table.insert(point_array, p)
    end
    return point_array
end

function get_coordinates_arc(center, radius, steps, start_angle, finish_angle)
    local point_array = {}
    local degrees_per_step = (finish_angle - start_angle) / steps
    local radians_per_step = math.rad(degrees_per_step)
    local initial_radians = math.rad(start_angle)
    for i = 0, steps do
        local p = {
            x = center['x'] + math.cos(radians_per_step * i + initial_radians) * radius,
            y = center['y'],
            z = center['z'] + math.sin(radians_per_step * i + initial_radians) * radius
        }
        table.insert(point_array, p)
    end
    return point_array
end


-- Gives a random angle between -pi/2-pi/2 for a ellipse
function random_polar_angle_ellipse(w,h)
    local u = math.random() / 4.0
    local theta = math.atan(h/w * math.tan(2*math.pi*u))

    local v = math.random()
    if v < 0.25 then
        return theta
    end
    if v < 0.5 then
        return math.pi - theta
    end
    if v < 0.75 then
        return math.pi + theta
    end
    return -theta
end

function get_radius_ellipse(w,h,theta)
    return w * h / math.sqrt((h*math.cos(theta))^2 + (w*math.sin(theta))^2)
end

-- https://stackoverflow.com/questions/5529148/algorithm-calculate-pseudo-random-point-inside-an-ellipse
function random_point_ellipse(w, h, added_from_center)
    local random_theta = random_polar_angle_ellipse(w, h)
    local max_radius = get_radius_ellipse(w, h, random_theta)
    local random_radius = max_radius * math.sqrt(math.random())
    if added_from_center ~= nil then
        random_radius = random_radius + added_from_center
    end

    return {
        x = random_radius * math.cos(random_theta),
        y = 0,
        z = random_radius * math.sin(random_theta)
    }
end

function spawn_asset(asset_name, tts_name, pos, added_y_axis_rotation, optional_callback)
    print_debug('Spawning asset ' .. asset_name)
    if not _G[asset_name] then
        print_error('Trying to spawn an asset that does not exist')
    end

    return spawn_asset_by_data(_G[asset_name], tts_name, pos, added_y_axis_rotation, optional_callback)
end

function spawn_asset_by_data(asset_data, tts_name, position, added_y_axis_rotation, optional_callback)
    local custom_rotation = {x=0, y=0, z=0}
    if asset_data.rotation_vector then
        custom_rotation = asset_data.rotation_vector
    end
    custom_rotation.y = custom_rotation.y + added_y_axis_rotation
    if asset_data.rotation then
        custom_rotation.y = custom_rotation.y + asset_data.rotation
    end

    local custom_scale = {x = 1, y = 1, z = 1}
    if asset_data.scale then
        custom_scale = asset_data.scale
    end
    local pos = shallow_copy(position)
    if asset_data.pos_offset then
        pos.x = pos.x + asset_data.pos_offset.x
        pos.y = pos.y + asset_data.pos_offset.y
        pos.z = pos.z + asset_data.pos_offset.z
    end
    local obj = spawnObject({
        type = 'Custom_Assetbundle',
        position = pos,
        rotation = custom_rotation,
        scale = custom_scale,
        sound = false,
        snap_to_grid = false,
        callback_function = optional_callback
    })
    obj.auto_raise = false
    obj.sticky = false
    obj.use_grid = false
    obj.use_snap_points = false
    obj.setCustomObject({
        assetbundle = asset_data.customasset
    })
    obj.setName(tts_name)
    return obj
end

function get_spawn_model(pos, rot, position_correction, model_scale, model_mesh, model_diffuse, model_normal_if_exists, collider_if_exists, optional_callback)
    local custom_scale = { x=1, y=1, z=1}
    if model_scale and type(model_scale) == "table" then
        custom_scale = model_scale
    elseif model_scale then
        custom_scale = { x = model_scale, y = model_scale, z = model_scale}
    end

    return {
        spawn = {
            type = 'Custom_Model',
            position = {
                x = pos.x + position_correction.x,
                y = pos.y + position_correction.y,
                z = pos.z + position_correction.z
            },
            rotation = rot,
            scale = custom_scale,
            sound = false,
            snap_to_grid = false,
            callback_function = optional_callback
        },
        custom_obj_attrs = {
            mesh = model_mesh,
            diffuse = model_diffuse,
            normal = model_normal_if_exists,
            material = 1,
            collider = collider_if_exists
        }
    }
end

g_index_dice = 1
function spawn_dice(type, color, pos)
    local obj = spawnObject({
        type = type,
        position = pos,
        rotation = { x = 0, y = 0, z = 0},
        scale = { x = 1.5, y = 1.5, z = 1.5},
        sound = false,
        snap_to_grid = false,
        callback_function = function(obj)
            obj.setColorTint(color)
        end
    })
    obj.setName('Dice ' .. g_index_dice)
end

function spawn_model(model_data_or_name, tts_name, pos, added_y_axis_rotation, collider, callback)

    local model_data = nil
    if type(model_data_or_name) == "table" then
        model_data = model_data_or_name
    else
        -- Better pray that the input name actually exists! lol
        model_data = _G[model_data_or_name]
    end

    local custom_rotation = {x=0, y=0, z=0}
    if model_data.rotation_vector then
        custom_rotation = model_data.rotation_vector
    end
    custom_rotation.y = custom_rotation.y + added_y_axis_rotation
    if model_data.rotation then
        custom_rotation.y = custom_rotation.y + model_data.rotation
    end

    local spawn_data = get_spawn_model(pos,
        custom_rotation,
        model_data['pos_offset'],
        model_data['scale'],
        model_data['mesh'],
        model_data['tex'],
        model_data['tex_normal'],
        collider,
        callback)

    print_debug('Spawning ' .. tts_name)
    local obj = spawnObject(spawn_data['spawn'])

    obj.setCustomObject(spawn_data['custom_obj_attrs'])
    obj.setName(tts_name)
    return obj
end

function spawn_text(text, tts_name, pos, left_align_optional, font_size_optional)
    local params = {
        type = '3DText',
        position = pos,
        rotation = { 90, 0, 0 }
    }
    local obj = spawnObject(params)
    obj.setValue(text)
    obj.TextTool.setFontSize(font_size_optional or 180)

    obj.setName(tts_name)
    if left_align_optional then
        local bounds = obj.getBounds()
        obj.setPosition({x=pos.x + bounds.size.x / 2, y=pos.y, z=pos.z})
    end
    return obj
end


function set_material_color(assetbundle, property_name, new_color)
    local mats = assetbundle.getMaterialsInChildren()
    for _,mat in ipairs(mats) do
      mat.set(property_name .. "R", new_color.R/255)
      mat.set(property_name .. "G", new_color.G/255)
      mat.set(property_name .. "B", new_color.B/255)
    end
end

function set_material_value(assetbundle, property_name, value)
    local mats = assetbundle.getMaterialsInChildren()
    for _,mat in ipairs(mats) do
      mat.set(property_name, value)
    end
end
