Cannons = {}

function Cannons:create(ship)
    _cannons = {}
    _cannons.ship = ship

    function _cannons:get_cannons(position)
        if not position or not cannon_positions[position] then
            print_error('The position for the cannons does not exist')
            log(position)
            return
        end
        return self.ship.current_cannons[position]
    end

    function _cannons:get_range(position, cannon_type)
        local ammo = self.ship.current_ammo[cannon_positions[position]]
        if ammo == ammo_types.Grape then
            return 3
        elseif ammo == ammo_types.Double then
            return 8
        elseif ammo == ammo_types.Chain then
            return cannon_ranges[cannon_type] / 2
        -- elseif ammo == ammo_types.Hot or ammo == ammo_types.Round then
        else
            return cannon_ranges[cannon_type]
        end
    end

    function _cannons:has_cannons(position)
        local cannons = self:get_cannons(position)
        if cannons then
            if cannons.heavy == 0
                and cannons.light == 0
                and cannons.mortar == 0
                and cannons.carronade == 0 then
                return false
            else
                return true
            end
        else
            return false
        end
    end

    -- Given a position of fire, returns a text saying the result of rolling
    -- those dice
    function _cannons:calculate_fire(player, position)
        if not self:has_cannons(position) then
            return self.ship.display_name .. ' is shooting from the '
                .. position .. ',' .. ' but it has no weapons there.'
        end

        local cannons = self:get_cannons(position)
        if not cannons then
            return 'Error while calculating the fire'
        end

        local text = self.ship.display_name .. ' is shooting from the ' .. position .. ','

        for cannon_type, cannon_number in pairs(cannons) do
            if cannon_number > 0 then
                text = text .. ' ' .. cannon_type .. ': '
                for i = 1, cannon_number, 1 do
                    text = text .. math.random(1,10)
                    if i < cannon_number then
                        text = text .. ', '
                    else
                        text = text .. ';'
                    end
                end
            end
        end

        local pos = cannon_positions[position]
        self.ship.current_turn_positions_shot[pos] = true
        if self.ship.initial_broadside and 
            (pos == cannon_positions.Starboard 
             or pos == cannon_positions.Port) then
            
            self.ship.initial_broadside = false
            self:recalculate_cannons()
        end

        Wait.frames(function()
            local effect = data_ships[self.ship.type].firing_effects[position]
            self.ship.hull_obj.AssetBundle.playTriggerEffect(effect)
        end, 1)
        return text
    end

    function _cannons:add_initial_broadside()
        local added = initial_broadside[data_ships[self.ship.type].size]
        if not added then
            return
        end
        -- First check if theres weapons at all that can fire there
        local starboard = self.ship.current_cannons.Starboard
        local starboard_n = 0
        for _, cannon_n in pairs(starboard) do
            starboard_n = starboard_n + cannon_n
        end
        if starboard_n > 0 then
            for cannon_type, cannon_n in pairs(starboard) do
                starboard[cannon_type] = cannon_n + added[cannon_type]
            end
        end
        local port = self.ship.current_cannons.Port
        local port_n = 0
        for _, cannon_n in pairs(port) do
            port_n = port_n + cannon_n
        end
        if port_n > 0 then
            for cannon_type, cannon_n in pairs(port) do
                port[cannon_type] = cannon_n + added[cannon_type]
            end
        end
    end

    function _cannons:reduce_cannons_to_half()
        -- Current cannons may have the initial broadside accounted for, which
        -- should not be part of the half number, so we reset them
        self.ship.current_cannons = deep_copy(data_ships[self.ship.type].cannons)
        for position_name, position_data in pairs(self.ship.current_cannons) do
            for cannon_name, number in pairs(position_data) do
                self.ship.current_cannons[position_name][cannon_name] = math.ceil(number/2)
            end
        end
        if self.ship.initial_broadside then
            self:add_initial_broadside()
        end
        self.ship.ui:show_ui_cannons()
    end

    function _cannons:restore_cannons()
        self.ship.current_cannons = deep_copy(data_ships[self.ship.type].cannons)
        if self.ship.initial_broadside then
            self:add_initial_broadside()
        end
        self.ship.ui:show_ui_cannons()
    end

    function _cannons:recalculate_cannons()
        if self.ship:is_damaged() then
            self:reduce_cannons_to_half()
        else
            self:restore_cannons()
        end
    end

    function _cannons:critical_roll_hull()
        local roll = math.random(1,6)
        if roll == 1 then
            print_important(self.ship.display_name .. ' has suffered Quarter Deck Hit!')
        elseif roll == 2 then
            print_important(self.ship.display_name .. ' has suffered Gun Deck Hit!')
        elseif roll == 3 then
            print_important(self.ship.display_name .. ' has suffered Rudder Hit!')
        elseif roll == 4 then
            print_important(self.ship.display_name .. ' has suffered Crew Hit!')
        elseif roll == 5 then
            print_important(self.ship.display_name .. ' has suffered Extra Damage!')
        elseif roll == 6 then
            print_important(self.ship.display_name .. ' has suffered Fire!')
        end
    end

    function _cannons:critical_roll_high()
        local roll = math.random(1,6)
        if roll == 1 then
            print_important(self.ship.display_name .. ' has suffered Quarter Deck Hit!')
        elseif roll == 2 then
            print_important(self.ship.display_name .. ' has suffered Sails Hit!')
        elseif roll == 3 then
            print_important(self.ship.display_name .. ' has suffered Crew Hit!')
        elseif roll == 4 then
            print_important(self.ship.display_name .. ' has suffered Upper Deck Damage!')
        elseif roll == 5 then
            print_important(self.ship.display_name .. ' has suffered Fire!')
        elseif roll == 6 then
            print_important(self.ship.display_name .. ' has suffered Mast Hit!')
        end
    end

    return _cannons
end